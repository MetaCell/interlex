/**
 * Generated by orval v6.28.2 üç∫
 * Do not edit manually.
 * Swagger Mock Missing Endpoints
 * OpenAPI spec version: 1.0.0
 */
import {
  useQuery
} from '@tanstack/react-query'
import type {
  QueryFunction,
  QueryKey,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import axios from 'axios'
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios'
import type {
  Error,
  Terms
} from '../model'

type AwaitedInput<T> = PromiseLike<T> | T;

      type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;



/**
 * @summary List all matching terms
 */
export const getMatchTerms = (
    term: string | undefined | null, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<Terms>> => {
    
    return axios.get(
      `/api/v1/search_term/${encodeURIComponent(String(term))}`,options
    );
  }


export const getGetMatchTermsQueryKey = (term: string | undefined | null,) => {
    return [`/api/v1/search_term/${term}`] as const;
    }

    
export const getGetMatchTermsQueryOptions = <TData = Awaited<ReturnType<typeof getMatchTerms>>, TError = AxiosError<Error>>(term: string | undefined | null, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMatchTerms>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMatchTermsQueryKey(term);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMatchTerms>>> = ({ signal }) => getMatchTerms(term, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(term), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMatchTerms>>, TError, TData> & { queryKey: QueryKey }
}

export type GetMatchTermsQueryResult = NonNullable<Awaited<ReturnType<typeof getMatchTerms>>>
export type GetMatchTermsQueryError = AxiosError<Error>

/**
 * @summary List all matching terms
 */
export const useGetMatchTerms = <TData = Awaited<ReturnType<typeof getMatchTerms>>, TError = AxiosError<Error>>(
 term: string | undefined | null, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMatchTerms>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetMatchTermsQueryOptions(term,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




