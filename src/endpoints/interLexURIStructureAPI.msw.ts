/**
 * Generated by orval v6.28.2 🍺
 * Do not edit manually.
 * InterLex URI structure API
 * Resolution, update, and compare for ontologies and ontology identifiers.
 * OpenAPI spec version: 0.0.1
 */
import {
  HttpResponse,
  delay,
  http
} from 'msw'

export const getGetOntologiesOntologiesResponseMock = () => ((() => ({
                status_code: 200,
                message: "",
              }))())

export const getGetEndpointsIlxResponseMock = () => ((() => ({
                prefixes: {
                  owl: "http://www.w3.org/2002/07/owl#",
                  rdf: "http://www.w3.org/1999/02/22-rdf-syntax-ns#",
                  rdfs: "http://www.w3.org/2000/01/rdf-schema#",
                  xsd: "http://www.w3.org/2001/XMLSchema#",
                  xml: "http://www.w3.org/XML/1998/namespace",
                  "": "file:///ERROR/EMPTY/PREFIX/BANNED/",
                },
                triples: [
                  [
                    "<http://uri.interlex.org/base/ilx_0101431>",
                    "<http://uri.interlex.org/base/readable/synonym>",
                    "suprasegmental levels of nervous system",
                  ],
                  [
                    "<http://uri.interlex.org/base/ilx_0101431>",
                    "<http://uri.interlex.org/base/readable/synonym>",
                    "synganglion",
                  ],
                  [
                    "<http://uri.interlex.org/base/ilx_0101431>",
                    "<http://uri.interlex.org/base/readable/synonym>",
                    "suprasegmental structures",
                  ],
                  [
                    "<http://uri.interlex.org/base/ilx_0101431>",
                    "<http://uri.interlex.org/tgbugs/uris/readable/hasExistingId>",
                    "<http://uri.neuinfo.org/nif/nifstd/birnlex_796>",
                  ],
                  [
                    "<http://uri.interlex.org/base/ilx_0101431>",
                    "<http://uri.interlex.org/base/ilx_0112784>",
                    "<http://uri.interlex.org/base/ilx_0102661>",
                  ],
                  [
                    "<http://uri.interlex.org/base/ilx_0101431>",
                    "<http://uri.interlex.org/base/ilx_0112796>",
                    "<http://uri.interlex.org/base/ilx_0101901>",
                  ],
                  [
                    "<http://uri.interlex.org/base/ilx_0101431>",
                    "<http://purl.obolibrary.org/obo/IAO_0000115>",
                    "The part of the central nervous system contained within the cranium, comprising the forebrain, midbrain, hindbrain, and metencephalon. It is derived from the anterior part of the embryonic neural tube (or the encephalon). Does not include retina. (CUMBO)The rostral topographic division of the cerebrospinal axis, while the caudal division is the spinal cord. The usual criterion for distinguishing the two divisions in the adult is that the vertebrate brain lies within the skull whereas the spinal cord lies within the spinal (vertebral) column, although this is a difficult problem. (Swanson, 2014)",
                  ],
                  [
                    "<http://uri.interlex.org/base/ilx_0101431>",
                    "<http://uri.interlex.org/tgbugs/uris/readable/hasExistingId>",
                    "<http://purl.org/sig/ont/fma/fma50801>",
                  ],
                  [
                    "<http://uri.interlex.org/base/ilx_0101431>",
                    "<http://uri.interlex.org/base/readable/synonym>",
                    "the brain",
                  ],
                  [
                    "<http://uri.interlex.org/base/ilx_0101431>",
                    "<http://uri.interlex.org/base/ilx_0112785>",
                    "<http://uri.interlex.org/base/ilx_0101999>",
                  ],
                  [
                    "<http://uri.interlex.org/base/ilx_0101431>",
                    "rdfs:subClassOf",
                    "<http://uri.interlex.org/base/ilx_0108124>",
                  ],
                  [
                    "<http://uri.interlex.org/base/ilx_0101431>",
                    "<http://uri.interlex.org/base/readable/synonym>",
                    "Encephalon",
                  ],
                  [
                    "<http://uri.interlex.org/base/ilx_0101431>",
                    "rdfs:label",
                    "Brain",
                  ],
                  [
                    "<http://uri.interlex.org/base/ilx_0101431>",
                    "<http://uri.interlex.org/tgbugs/uris/readable/hasExistingId>",
                    "<http://purl.obolibrary.org/obo/UBERON_0000955>",
                  ],
                  [
                    "<http://uri.interlex.org/base/ilx_0101431>",
                    "rdf:type",
                    "owl:Class",
                  ],
                ],
              }))())


export const getGetEndpointsOpsMockHandler = () => {
  return http.get('*/Operations/:group/ops/:operation', async () => {
    await delay(1000);
    return new HttpResponse(null,
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getPostEndpointsOpsMockHandler = () => {
  return http.post('*/Operations/:group/ops/:operation', async () => {
    await delay(1000);
    return new HttpResponse(null,
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getGetEndpointsPrivMockHandler = () => {
  return http.get('*/Privileged endpoints/:group/priv/:page', async () => {
    await delay(1000);
    return new HttpResponse(null,
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getPostEndpointsPrivMockHandler = () => {
  return http.post('*/Privileged endpoints/:group/priv/:page', async () => {
    await delay(1000);
    return new HttpResponse(null,
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getGetEndpointsContributionsMockHandler = () => {
  return http.get('*/:group/contributions/interlex', async () => {
    await delay(1000);
    return new HttpResponse(null,
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}


export const getPostEndpointsCuriesMockHandler = () => {
  return http.post('*/:group/curies/', async () => {
    await delay(1000);
    return new HttpResponse(null,
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getGetEndpointsCuriesMockHandler = () => {
  return http.get('*/:group/curies/:prefixIriCurie', async () => {
    await delay(1000);
    return new HttpResponse(null,
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getGetDiffCuriesMockHandler = () => {
  return http.get('*/:group/diff/:otherGroupDiff/curies/:prefixIriCurie', async () => {
    await delay(1000);
    return new HttpResponse(null,
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getGetDiffLexicalMockHandler = () => {
  return http.get('*/:group/diff/:otherGroupDiff/lexical/:label', async () => {
    await delay(1000);
    return new HttpResponse(null,
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getGetDiffOntologiesContributionsMockHandler = () => {
  return http.get('*/:group/diff/:otherGroupDiff/ontologies/contributions', async () => {
    await delay(1000);
    return new HttpResponse(null,
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getGetDiffOntologiesUrisMockHandler = () => {
  return http.get('*/:group/diff/:otherGroupDiff/ontologies/uris/:ontPath/:filename/', async () => {
    await delay(1000);
    return new HttpResponse(null,
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getGetDiffOntologiesUrisVersionMockHandler = () => {
  return http.get('*/:group/diff/:otherGroupDiff/ontologies/uris/:ontPath/:filename/version/:epochVerstrOnt/:filenameTerminal.:extension', async () => {
    await delay(1000);
    return new HttpResponse(null,
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getGetDiffOntologiesMockHandler = () => {
  return http.get('*/:group/diff/:otherGroupDiff/ontologies/:ontPath/:filename/', async () => {
    await delay(1000);
    return new HttpResponse(null,
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getGetDiffOntologiesVersionMockHandler = () => {
  return http.get('*/:group/diff/:otherGroupDiff/ontologies/:ontPath/:filename/version/:epochVerstrOnt/:filenameTerminal.:extension', async () => {
    await delay(1000);
    return new HttpResponse(null,
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getGetDiffOntologiesIlxMockHandler = () => {
  return http.get('*/:group/diff/:otherGroupDiff/ontologies/:fragPrefId.:extension', async () => {
    await delay(1000);
    return new HttpResponse(null,
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getGetDiffReadableMockHandler = () => {
  return http.get('*/:group/diff/:otherGroupDiff/readable/:word', async () => {
    await delay(1000);
    return new HttpResponse(null,
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getGetDiffUrisMockHandler = () => {
  return http.get('*/:group/diff/:otherGroupDiff/uris/:uriPath', async () => {
    await delay(1000);
    return new HttpResponse(null,
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getGetDiffVersionsCuriesMockHandler = () => {
  return http.get('*/:group/diff/:otherGroupDiff/versions/:epochVerstrId/curies/:prefixIriCurie', async () => {
    await delay(1000);
    return new HttpResponse(null,
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getGetDiffVersionsReadableMockHandler = () => {
  return http.get('*/:group/diff/:otherGroupDiff/versions/:epochVerstrId/readable/:word', async () => {
    await delay(1000);
    return new HttpResponse(null,
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getGetDiffVersionsUrisMockHandler = () => {
  return http.get('*/:group/diff/:otherGroupDiff/versions/:epochVerstrId/uris/:uriPath', async () => {
    await delay(1000);
    return new HttpResponse(null,
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getGetDiffVersionsIlxMockHandler = () => {
  return http.get('*/:group/diff/:otherGroupDiff/versions/:epochVerstrId/:fragPrefId', async () => {
    await delay(1000);
    return new HttpResponse(null,
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getGetDiffIlxMockHandler = () => {
  return http.get('*/:group/diff/:otherGroupDiff/:fragPrefId', async () => {
    await delay(1000);
    return new HttpResponse(null,
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getGetEndpointsMappedMockHandler = () => {
  return http.get('*/:group/external/mapped', async () => {
    await delay(1000);
    return new HttpResponse(null,
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getPostEndpointsMappedMockHandler = () => {
  return http.post('*/:group/external/mapped', async () => {
    await delay(1000);
    return new HttpResponse(null,
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getGetEndpointsLexicalMockHandler = () => {
  return http.get('*/:group/lexical/:label', async () => {
    await delay(1000);
    return new HttpResponse(null,
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getGetOntologiesOntologiesContributionsMockHandler = () => {
  return http.get('*/:group/ontologies/contributions', async () => {
    await delay(1000);
    return new HttpResponse(null,
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getGetOntologiesOntologiesUrisMockHandler = () => {
  return http.get('*/:group/ontologies/uris/:ontPath/:filename/', async () => {
    await delay(1000);
    return new HttpResponse(null,
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getPostOntologiesOntologiesUrisMockHandler = () => {
  return http.post('*/:group/ontologies/uris/:ontPath/:filename.:extension', async () => {
    await delay(1000);
    return new HttpResponse(null,
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getGetOntologiesOntologiesUrisVersionMockHandler = () => {
  return http.get('*/:group/ontologies/uris/:ontPath/:filename/version/:epochVerstrOnt/:filenameTerminal.:extension', async () => {
    await delay(1000);
    return new HttpResponse(null,
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getPostOntologiesOntologiesUrisVersionMockHandler = () => {
  return http.post('*/:group/ontologies/uris/:ontPath/:filename/version/:epochVerstrOnt/:filenameTerminal.:extension', async () => {
    await delay(1000);
    return new HttpResponse(null,
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getGetOntologiesOntologiesMockHandler = (overrideResponse?: void) => {
  return http.get('*/:group/ontologies/:ontPath/:filename/', async () => {
    await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined ? overrideResponse : getGetOntologiesOntologiesResponseMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getPostOntologiesOntologiesMockHandler = () => {
  return http.post('*/:group/ontologies/:ontPath/:filename.:extension', async () => {
    await delay(1000);
    return new HttpResponse(null,
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getGetOntologiesOntologiesVersionMockHandler = () => {
  return http.get('*/:group/ontologies/:ontPath/:filename/version/:epochVerstrOnt/:filenameTerminal.:extension', async () => {
    await delay(1000);
    return new HttpResponse(null,
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getGetOntologiesOntologiesIlxMockHandler = () => {
  return http.get('*/:group/ontologies/:fragPrefId.:extension', async () => {
    await delay(1000);
    return new HttpResponse(null,
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getPostOwnCuriesMockHandler = () => {
  return http.post('*/:group/own/:otherGroup/curies/', async () => {
    await delay(1000);
    return new HttpResponse(null,
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getGetOwnCuriesMockHandler = () => {
  return http.get('*/:group/own/:otherGroup/curies/:prefixIriCurie', async () => {
    await delay(1000);
    return new HttpResponse(null,
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getGetOwnOntologiesContributionsMockHandler = () => {
  return http.get('*/:group/own/:otherGroup/ontologies/contributions', async () => {
    await delay(1000);
    return new HttpResponse(null,
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getGetOwnOntologiesUrisMockHandler = () => {
  return http.get('*/:group/own/:otherGroup/ontologies/uris/:ontPath/:filename/', async () => {
    await delay(1000);
    return new HttpResponse(null,
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getPostOwnOntologiesUrisMockHandler = () => {
  return http.post('*/:group/own/:otherGroup/ontologies/uris/:ontPath/:filename.:extension', async () => {
    await delay(1000);
    return new HttpResponse(null,
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getGetOwnOntologiesUrisVersionMockHandler = () => {
  return http.get('*/:group/own/:otherGroup/ontologies/uris/:ontPath/:filename/version/:epochVerstrOnt/:filenameTerminal.:extension', async () => {
    await delay(1000);
    return new HttpResponse(null,
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getPostOwnOntologiesUrisVersionMockHandler = () => {
  return http.post('*/:group/own/:otherGroup/ontologies/uris/:ontPath/:filename/version/:epochVerstrOnt/:filenameTerminal.:extension', async () => {
    await delay(1000);
    return new HttpResponse(null,
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getGetOwnOntologiesMockHandler = () => {
  return http.get('*/:group/own/:otherGroup/ontologies/:ontPath/:filename/', async () => {
    await delay(1000);
    return new HttpResponse(null,
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getPostOwnOntologiesMockHandler = () => {
  return http.post('*/:group/own/:otherGroup/ontologies/:ontPath/:filename.:extension', async () => {
    await delay(1000);
    return new HttpResponse(null,
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getGetOwnOntologiesVersionMockHandler = () => {
  return http.get('*/:group/own/:otherGroup/ontologies/:ontPath/:filename/version/:epochVerstrOnt/:filenameTerminal.:extension', async () => {
    await delay(1000);
    return new HttpResponse(null,
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getGetOwnOntologiesIlxMockHandler = () => {
  return http.get('*/:group/own/:otherGroup/ontologies/:fragPrefId.:extension', async () => {
    await delay(1000);
    return new HttpResponse(null,
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getGetOwnUrisMockHandler = () => {
  return http.get('*/:group/own/:otherGroup/uris/:uriPath', async () => {
    await delay(1000);
    return new HttpResponse(null,
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getGetOwnVersionsCuriesMockHandler = () => {
  return http.get('*/:group/own/:otherGroup/versions/:epochVerstrId/curies/', async () => {
    await delay(1000);
    return new HttpResponse(null,
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getGetOwnVersionsReadableMockHandler = () => {
  return http.get('*/:group/own/:otherGroup/versions/:epochVerstrId/readable/:word', async () => {
    await delay(1000);
    return new HttpResponse(null,
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getGetOwnVersionsUrisMockHandler = () => {
  return http.get('*/:group/own/:otherGroup/versions/:epochVerstrId/uris/:uriPath', async () => {
    await delay(1000);
    return new HttpResponse(null,
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getGetOwnVersionsIlxMockHandler = () => {
  return http.get('*/:group/own/:otherGroup/versions/:epochVerstrId/:fragPrefId', async () => {
    await delay(1000);
    return new HttpResponse(null,
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getGetEndpointsProvMockHandler = () => {
  return http.get('*/:group/prov/identities/:identity', async () => {
    await delay(1000);
    return new HttpResponse(null,
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getGetEndpointsReadableMockHandler = () => {
  return http.get('*/:group/readable/:word', async () => {
    await delay(1000);
    return new HttpResponse(null,
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getPatchEndpointsReadableMockHandler = () => {
  return http.patch('*/:group/readable/:word', async () => {
    await delay(1000);
    return new HttpResponse(null,
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getPostEndpointsUploadMockHandler = () => {
  return http.post('*/:group/upload', async () => {
    await delay(1000);
    return new HttpResponse(null,
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getGetEndpointsUrisMockHandler = () => {
  return http.get('*/:group/uris/:uriPath', async () => {
    await delay(1000);
    return new HttpResponse(null,
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getGetVersionsCuriesMockHandler = () => {
  return http.get('*/:group/versions/:epochVerstrId/curies/:prefixIriCurie', async () => {
    await delay(1000);
    return new HttpResponse(null,
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getGetVersionsReadableMockHandler = () => {
  return http.get('*/:group/versions/:epochVerstrId/readable/:word', async () => {
    await delay(1000);
    return new HttpResponse(null,
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getGetVersionsUrisMockHandler = () => {
  return http.get('*/:group/versions/:epochVerstrId/uris/:uriPath', async () => {
    await delay(1000);
    return new HttpResponse(null,
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getGetVersionsIlxMockHandler = () => {
  return http.get('*/:group/versions/:epochVerstrId/:fragPrefId', async () => {
    await delay(1000);
    return new HttpResponse(null,
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getGetEndpointsIlxMockHandler = (overrideResponse?: void) => {
  return http.get('*/:group/:fragPrefId', async () => {
    await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined ? overrideResponse : getGetEndpointsIlxResponseMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getPatchEndpointsIlxMockHandler = () => {
  return http.patch('*/:group/:fragPrefId', async () => {
    await delay(1000);
    return new HttpResponse(null,
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getGetEndpointsIlxGetMockHandler = () => {
  return http.get('*/:group/:fragPrefId.:extension', async () => {
    await delay(1000);
    return new HttpResponse(null,
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}
export const getInterLexURIStructureAPIMock = () => [
  getGetEndpointsOpsMockHandler(),
  getPostEndpointsOpsMockHandler(),
  getGetEndpointsPrivMockHandler(),
  getPostEndpointsPrivMockHandler(),
  getGetEndpointsContributionsMockHandler(),
  getGetEndpointsContributionsMockHandler(),
  getGetEndpointsCuriesMockHandler(),
  getPostEndpointsCuriesMockHandler(),
  getGetEndpointsCuriesMockHandler(),
  getGetDiffCuriesMockHandler(),
  getGetDiffCuriesMockHandler(),
  getGetDiffLexicalMockHandler(),
  getGetDiffOntologiesContributionsMockHandler(),
  getGetDiffOntologiesUrisMockHandler(),
  getGetDiffOntologiesUrisVersionMockHandler(),
  getGetDiffOntologiesMockHandler(),
  getGetDiffOntologiesVersionMockHandler(),
  getGetDiffOntologiesIlxMockHandler(),
  getGetDiffReadableMockHandler(),
  getGetDiffUrisMockHandler(),
  getGetDiffVersionsCuriesMockHandler(),
  getGetDiffVersionsCuriesMockHandler(),
  getGetDiffVersionsReadableMockHandler(),
  getGetDiffVersionsUrisMockHandler(),
  getGetDiffVersionsIlxMockHandler(),
  getGetDiffIlxMockHandler(),
  getGetEndpointsMappedMockHandler(),
  getPostEndpointsMappedMockHandler(),
  getGetEndpointsLexicalMockHandler(),
  getGetOntologiesOntologiesContributionsMockHandler(),
  getGetOntologiesOntologiesUrisMockHandler(),
  getPostOntologiesOntologiesUrisMockHandler(),
  getGetOntologiesOntologiesUrisVersionMockHandler(),
  getPostOntologiesOntologiesUrisVersionMockHandler(),
  getGetOntologiesOntologiesMockHandler(),
  getPostOntologiesOntologiesMockHandler(),
  getGetOntologiesOntologiesVersionMockHandler(),
  getGetOntologiesOntologiesIlxMockHandler(),
  getGetOwnCuriesMockHandler(),
  getPostOwnCuriesMockHandler(),
  getGetOwnCuriesMockHandler(),
  getGetOwnOntologiesContributionsMockHandler(),
  getGetOwnOntologiesUrisMockHandler(),
  getPostOwnOntologiesUrisMockHandler(),
  getGetOwnOntologiesUrisVersionMockHandler(),
  getPostOwnOntologiesUrisVersionMockHandler(),
  getGetOwnOntologiesMockHandler(),
  getPostOwnOntologiesMockHandler(),
  getGetOwnOntologiesVersionMockHandler(),
  getGetOwnOntologiesIlxMockHandler(),
  getGetOwnUrisMockHandler(),
  getGetOwnVersionsCuriesMockHandler(),
  getGetOwnVersionsCuriesMockHandler(),
  getGetOwnVersionsReadableMockHandler(),
  getGetOwnVersionsUrisMockHandler(),
  getGetOwnVersionsIlxMockHandler(),
  getGetEndpointsProvMockHandler(),
  getGetEndpointsReadableMockHandler(),
  getPatchEndpointsReadableMockHandler(),
  getPostEndpointsUploadMockHandler(),
  getGetEndpointsUrisMockHandler(),
  getGetVersionsCuriesMockHandler(),
  getGetVersionsCuriesMockHandler(),
  getGetVersionsReadableMockHandler(),
  getGetVersionsUrisMockHandler(),
  getGetVersionsIlxMockHandler(),
  getGetEndpointsIlxMockHandler(),
  getPatchEndpointsIlxMockHandler(),
  getGetEndpointsIlxGetMockHandler()
]
