/**
 * Generated by orval v6.28.2 🍺
 * Do not edit manually.
 * Swagger Mock Missing Endpoints
 * OpenAPI spec version: 1.0.0
 */
import {
  faker
} from '@faker-js/faker'
import {
  HttpResponse,
  delay,
  http
} from 'msw'
import type {
  Organizations,
  Terms
} from '../model'

export const getLoginResponseMock = () => ((() => ({
                userID: "Sample UserID",
                userName: "testUser",
                statusCode: 200,
                message: "",
                description: "",
                redirect_url: "",
              }))())

export const getLogoutResponseMock = () => ((() => ({
                userID: "Sample UserID",
                userName: "testUser",
                statusCode: 200,
                message: "",
                description: "",
                redirect_url: "",
              }))())

export const getGetOrganizationResponseMock = () => ((() => ({
                name: "Organization",
                creationDate: "01/01/2000",
                statusCode: 200,
                message: "",
                description: "",
                redirect_url: "",
              }))())

export const getNewOrganizationResponseMock = () => ((() => ({
                name: "New Organization",
                creationDate: "01/01/2000",
                statusCode: 200,
                message: "",
                description: "",
                redirect_url: "",
              }))())

export const getGetOrganizationsResponseMock = () => ((() => [
                {
                  name: "Organization",
                  creationDate: "01/01/2000",
                  statusCode: 200,
                  message: "",
                  description: "",
                  redirect_url: "",
                },
                {
                  name: "Organization 2",
                  creationDate: "01/02/2000",
                  statusCode: 200,
                  message: "",
                  description: "",
                  redirect_url: "",
                },
                {
                  name: "Organization 3",
                  creationDate: "01/03/2000",
                  statusCode: 200,
                  message: "",
                  description: "",
                  redirect_url: "",
                },
              ])())

export const getGetSearchResultsResponseMock = (overrideResponse: any = {}): Terms => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.word.sample(), id: faker.word.sample(), name: faker.word.sample(), prefixes: {}, triples: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())))), ...overrideResponse})))

export const getGetHierarchyResultsResponseMock = (overrideResponse: any = {}): Terms => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.word.sample(), id: faker.word.sample(), name: faker.word.sample(), prefixes: {}, triples: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())))), ...overrideResponse})))

export const getGetTermsResponseMock = (overrideResponse: any = {}): Terms => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.word.sample(), id: faker.word.sample(), name: faker.word.sample(), prefixes: {}, triples: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())))), ...overrideResponse})))

export const getGetMatchTermsResponseMock = () => ((() => ({
                prefixes: {
                  owl: "http://www.w3.org/2002/07/owl#",
                  rdf: "http://www.w3.org/1999/02/22-rdf-syntax-ns#",
                  rdfs: "http://www.w3.org/2000/01/rdf-schema#",
                  xsd: "http://www.w3.org/2001/XMLSchema#",
                  xml: "http://www.w3.org/XML/1998/namespace",
                  "": "file:///ERROR/EMPTY/PREFIX/BANNED/",
                },
                triples: [
                  [
                    "<http://uri.interlex.org/base/ilx_0101431>",
                    "<http://uri.interlex.org/base/readable/synonym>",
                    "suprasegmental levels of nervous system",
                  ],
                  [
                    "<http://uri.interlex.org/base/ilx_0101431>",
                    "<http://uri.interlex.org/base/readable/synonym>",
                    "synganglion",
                  ],
                  [
                    "<http://uri.interlex.org/base/ilx_0101431>",
                    "<http://uri.interlex.org/base/readable/synonym>",
                    "suprasegmental structures",
                  ],
                  [
                    "<http://uri.interlex.org/base/ilx_0101431>",
                    "<http://uri.interlex.org/tgbugs/uris/readable/hasExistingId>",
                    "<http://uri.neuinfo.org/nif/nifstd/birnlex_796>",
                  ],
                  [
                    "<http://uri.interlex.org/base/ilx_0101431>",
                    "<http://uri.interlex.org/base/ilx_0112784>",
                    "<http://uri.interlex.org/base/ilx_0102661>",
                  ],
                  [
                    "<http://uri.interlex.org/base/ilx_0101431>",
                    "<http://uri.interlex.org/base/ilx_0112796>",
                    "<http://uri.interlex.org/base/ilx_0101901>",
                  ],
                  [
                    "<http://uri.interlex.org/base/ilx_0101431>",
                    "<http://purl.obolibrary.org/obo/IAO_0000115>",
                    "The part of the central nervous system contained within the cranium, comprising the forebrain, midbrain, hindbrain, and metencephalon. It is derived from the anterior part of the embryonic neural tube (or the encephalon). Does not include retina. (CUMBO)The rostral topographic division of the cerebrospinal axis, while the caudal division is the spinal cord. The usual criterion for distinguishing the two divisions in the adult is that the vertebrate brain lies within the skull whereas the spinal cord lies within the spinal (vertebral) column, although this is a difficult problem. (Swanson, 2014)",
                  ],
                  [
                    "<http://uri.interlex.org/base/ilx_0101431>",
                    "<http://uri.interlex.org/tgbugs/uris/readable/hasExistingId>",
                    "<http://purl.org/sig/ont/fma/fma50801>",
                  ],
                  [
                    "<http://uri.interlex.org/base/ilx_0101431>",
                    "<http://uri.interlex.org/base/readable/synonym>",
                    "the brain",
                  ],
                  [
                    "<http://uri.interlex.org/base/ilx_0101431>",
                    "<http://uri.interlex.org/base/ilx_0112785>",
                    "<http://uri.interlex.org/base/ilx_0101999>",
                  ],
                  [
                    "<http://uri.interlex.org/base/ilx_0101431>",
                    "rdfs:subClassOf",
                    "<http://uri.interlex.org/base/ilx_0108124>",
                  ],
                  [
                    "<http://uri.interlex.org/base/ilx_0101431>",
                    "<http://uri.interlex.org/base/readable/synonym>",
                    "Encephalon",
                  ],
                  [
                    "<http://uri.interlex.org/base/ilx_0101431>",
                    "rdfs:label",
                    "Brain",
                  ],
                  [
                    "<http://uri.interlex.org/base/ilx_0101431>",
                    "<http://uri.interlex.org/tgbugs/uris/readable/hasExistingId>",
                    "<http://purl.obolibrary.org/obo/UBERON_0000955>",
                  ],
                  [
                    "<http://uri.interlex.org/base/ilx_0101431>",
                    "rdf:type",
                    "owl:Class",
                  ],
                ],
              }))())


export const getLoginMockHandler = (overrideResponse?: void) => {
  return http.post('*/operations/login', async () => {
    await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined ? overrideResponse : getLoginResponseMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getLogoutMockHandler = (overrideResponse?: void) => {
  return http.post('*/operations/logout', async () => {
    await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined ? overrideResponse : getLogoutResponseMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getRegisterMockHandler = () => {
  return http.post('*/operations/register', async () => {
    await delay(1000);
    return new HttpResponse(null,
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getGetOrganizationMockHandler = (overrideResponse?: unknown) => {
  return http.get('*/operations/organization', async () => {
    await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined ? overrideResponse : getGetOrganizationResponseMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getNewOrganizationMockHandler = (overrideResponse?: unknown) => {
  return http.post('*/operations/organization', async () => {
    await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined ? overrideResponse : getNewOrganizationResponseMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getGetOrganizationsMockHandler = (overrideResponse?: Organizations) => {
  return http.get('*/operations/organizations', async () => {
    await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined ? overrideResponse : getGetOrganizationsResponseMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getGetSearchResultsMockHandler = (overrideResponse?: Terms) => {
  return http.get('*/:group/search/:string', async () => {
    await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined ? overrideResponse : getGetSearchResultsResponseMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getGetHierarchyResultsMockHandler = (overrideResponse?: Terms) => {
  return http.get('*/:group/query/transitive/:property/:start?depth', async () => {
    await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined ? overrideResponse : getGetHierarchyResultsResponseMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getGetTermsMockHandler = (overrideResponse?: Terms) => {
  return http.get('*/get_terms', async () => {
    await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined ? overrideResponse : getGetTermsResponseMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getGetMatchTermsMockHandler = (overrideResponse?: Terms) => {
  return http.get('*/search_term/:term', async () => {
    await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined ? overrideResponse : getGetMatchTermsResponseMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getGetPingMockHandler = () => {
  return http.get('*/ping', async () => {
    await delay(1000);
    return new HttpResponse(null,
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}
export const getSwaggerMockMissingEndpointsMock = () => [
  getLoginMockHandler(),
  getLogoutMockHandler(),
  getRegisterMockHandler(),
  getGetOrganizationMockHandler(),
  getNewOrganizationMockHandler(),
  getGetOrganizationsMockHandler(),
  getGetSearchResultsMockHandler(),
  getGetHierarchyResultsMockHandler(),
  getGetTermsMockHandler(),
  getGetMatchTermsMockHandler(),
  getGetPingMockHandler()]
